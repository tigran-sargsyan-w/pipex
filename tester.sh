#!/bin/bash

errors=0  # Error counter
PIPEX_BIN="$(pwd)/pipex"  # Path to the pipex binary

# Check if the pipex binary exists
if [ ! -f "$PIPEX_BIN" ]; then
    echo "‚ùå Error: pipex binary not found! Please compile your project first."
    exit 1
fi

# Check if pipex is an executable file
if [ ! -x "$PIPEX_BIN" ]; then
    echo "‚ùå Error: pipex binary is not executable! Attempting to set executable permission..."
    chmod +x "$PIPEX_BIN"
fi

# Create a temporary directory for tests and navigate into it
TEST_DIR="pipex_test_dir"
mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

# Function to run basic tests (Valgrind - optional)
run_test() {
    local infile="$1"
    local cmd1="$2"
    local cmd2="$3"
    local outfile="$4"
    local use_valgrind="$5"

    # üõ† –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ infile —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "$infile" ]; then
        # echo "Creating default $infile..."
        printf "Hello\nWorld\nPipex\nTest\n" > "$infile"
    fi

    # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª –±—ã Shell)
    rm -f expected_output.txt
    < "$infile" $cmd1 | $cmd2 > expected_output.txt 2>/dev/null

    rm -f "$outfile"

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è Pipex: —Å Valgrind –∏–ª–∏ –±–µ–∑
    local exec_cmd="$PIPEX_BIN"
    [ "$use_valgrind" == "valgrind" ] && exec_cmd="valgrind --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all --error-exitcode=42 $PIPEX_BIN"

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Pipex
    $exec_cmd "$infile" "$cmd1" "$cmd2" "$outfile" 2>/dev/null
    local status=$?

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ `outfile`
    if [ ! -f "$outfile" ]; then
        echo "‚ùå FAIL: Pipex did NOT create $outfile for <$infile $cmd1 | $cmd2>"
        errors=$((errors + 1))
        return
    fi

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º `Valgrind` –∏–ª–∏ `diff`
    if [ "$use_valgrind" == "valgrind" ]; then
        if [ "$status" -eq 42 ]; then
            echo "‚ùå FAIL (Valgrind): <$infile $cmd1 | $cmd2>"
            errors=$((errors + 1))
        else
            echo "‚úÖ OK (Valgrind): <$infile $cmd1 | $cmd2>"
        fi
    else
        # üöÄ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º `\n`, —á—Ç–æ–±—ã `diff` —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        sed -i -e '$a\' expected_output.txt
        sed -i -e '$a\' "$outfile"

        if diff expected_output.txt "$outfile" >/dev/null 2>&1; then
            echo "‚úÖ OK: <$infile $cmd1 | $cmd2> -> $outfile"
        else
            echo "‚ùå FAIL: <$infile $cmd1 | $cmd2> -> $outfile"
            echo "--- Expected Output (hexdump) ---"
            hexdump -C expected_output.txt
            echo "--- Pipex Output (hexdump) ---"
            hexdump -C "$outfile"
            errors=$((errors + 1))
        fi
    fi
}

# Function to run multiple-command tests (Valgrind - optional)
run_multi_test() {
    local infile="$1"
    local cmd1="$2"
    local cmd2="$3"
    local cmd3="$4"
    local outfile="$5"
    local use_valgrind=""

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç "valgrind", —Ç–æ –≤–∫–ª—é—á–∞–µ–º Valgrind
    if [ "$outfile" == "valgrind" ]; then
        use_valgrind="valgrind"
        outfile="$5"
        cmd3="$4"
        cmd2="$3"
        cmd1="$2"
        infile="$1"
    fi

    # üõ† –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ `infile` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "$infile" ]; then
        # echo "Creating default $infile..."
        printf "Hello\nWorld\nPipex\nTest\ntest1\ntest2\n" > "$infile"
    fi

    # üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º `expected_output.txt` —á–µ—Ä–µ–∑ Shell
    rm -f expected_output.txt
    eval "< \"$infile\" $cmd1 | $cmd2 | $cmd3 > expected_output.txt 2>/dev/null"

    rm -f "$outfile"

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è Pipex: —Å Valgrind –∏–ª–∏ –±–µ–∑
    local exec_cmd="$PIPEX_BIN"
    [ "$use_valgrind" == "valgrind" ] && exec_cmd="valgrind --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all --error-exitcode=42 $PIPEX_BIN"

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Pipex
    eval "$exec_cmd \"$infile\" \"$cmd1\" \"$cmd2\" \"$cmd3\" \"$outfile\"" 2>/dev/null
    local status=$?

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ `outfile`
    if [ ! -f "$outfile" ]; then
        echo "‚ùå FAIL: Pipex did NOT create $outfile for <$infile $cmd1 | $cmd2 | $cmd3>"
        errors=$((errors + 1))
        return
    fi

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º `Valgrind` –∏–ª–∏ `diff`
    if [ "$use_valgrind" == "valgrind" ]; then
        if [ "$status" -eq 42 ]; then
            echo "‚ùå FAIL (Valgrind - multi_cmd): <$infile $cmd1 | $cmd2 | $cmd3>"
            errors=$((errors + 1))
        else
            echo "‚úÖ OK (Valgrind - multi_cmd): <$infile $cmd1 | $cmd2 | $cmd3>"
        fi
    else
        # üöÄ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º `\n`, —á—Ç–æ–±—ã `diff` —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        sed -i -e '$a\' expected_output.txt
        sed -i -e '$a\' "$outfile"

        if diff expected_output.txt "$outfile" >/dev/null 2>&1; then
            echo "‚úÖ OK: <$infile $cmd1 | $cmd2 | $cmd3> -> $outfile"
        else
            echo "‚ùå FAIL: <$infile $cmd1 | $cmd2 | $cmd3> -> $outfile"
            echo "--- Expected Output (hexdump) ---"
            hexdump -C expected_output.txt
            echo "--- Pipex Output (hexdump) ---"
            hexdump -C "$outfile"
            errors=$((errors + 1))
        fi
    fi
}

# Function to run here_doc tests (Valgrind - optional)
run_here_doc_test() {
    local limiter="$1"
    local cmd1="$2"
    local cmd2="$3"
    local outfile="$4"
    local use_valgrind="$5"

    # üõ† –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ `expected_hd.txt` –∏–º–µ–µ—Ç —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É `here_doc`
    printf "hello\naaa\nbbb\n" > expected_hd.txt
    cat expected_hd.txt | $cmd1 | $cmd2 > expected_output.txt 2>/dev/null

    rm -f "$outfile"

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å Valgrind –∏–ª–∏ –±–µ–∑
    local exec_cmd="$PIPEX_BIN"
    [ "$use_valgrind" == "valgrind" ] && exec_cmd="valgrind --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all --error-exitcode=42 $PIPEX_BIN"

    # üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º `printf`, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å `here_doc` –≤ pipex
    printf "hello\naaa\nbbb\n%s\n" "$limiter" | $exec_cmd here_doc "$limiter" "$cmd1" "$cmd2" "$outfile" 2>/dev/null
    local status=$?

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ `outfile`
    if [ ! -f "$outfile" ]; then
        echo "‚ùå FAIL (here_doc): outfile was NOT created (limiter=\"$limiter\", cmds=\"$cmd1 $cmd2\")"
        errors=$((errors + 1))
        return
    fi

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º `Valgrind` –∏–ª–∏ `diff`
    if [ "$use_valgrind" == "valgrind" ]; then
        if [ "$status" -eq 42 ]; then
            echo "‚ùå FAIL (Valgrind - here_doc): LIMITER=\"$limiter\""
            errors=$((errors + 1))
        else
            echo "‚úÖ OK (Valgrind - here_doc): LIMITER=\"$limiter\""
        fi
    else
        # üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º `\n`, —á—Ç–æ–±—ã `diff` —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        sed -i -e '$a\' expected_output.txt
        sed -i -e '$a\' "$outfile"

        if diff expected_output.txt "$outfile" >/dev/null 2>&1; then
            echo "‚úÖ OK (here_doc): LIMITER=\"$limiter\""
        else
            echo "‚ùå FAIL (here_doc): LIMITER=\"$limiter\""
            echo "--- Expected Output (hexdump) ---"
            hexdump -C expected_output.txt
            echo "--- Pipex Output (hexdump) ---"
            hexdump -C "$outfile"
            errors=$((errors + 1))
        fi
    fi
}

# Function to run nonexistent tests (Valgrind - optional)
run_badcmd_test() {
    local infile="$1"
    local badcmd="$2"
    local cmd2="$3"
    local outfile="$4"
    local use_valgrind="$5"

    # üõ† –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ infile —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "$infile" ]; then
        # echo "Creating default $infile..."
        printf "Some input data\n" > "$infile"
    fi

    # üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Shell)
    rm -f expected_output.txt
    ( < "$infile" $badcmd | $cmd2 ) > expected_output.txt 2> bad_error.txt

    rm -f "$outfile"

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è Pipex: —Å Valgrind –∏–ª–∏ –±–µ–∑
    local exec_cmd="$PIPEX_BIN"
    [ "$use_valgrind" == "valgrind" ] && exec_cmd="valgrind --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all --error-exitcode=42 $PIPEX_BIN"

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Pipex
    $exec_cmd "$infile" "$badcmd" "$cmd2" "$outfile" 2>/dev/null
    local status=$?

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ `outfile`
    if [ ! -f "$outfile" ]; then
        echo "‚úÖ OK (badcmd): outfile NOT created for <$infile $badcmd | $cmd2>"
        return
    fi

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º `Valgrind` –∏–ª–∏ `diff`
    if [ "$use_valgrind" == "valgrind" ]; then
        if [ "$status" -eq 42 ]; then
            echo "‚ùå FAIL (Valgrind): <$infile $badcmd | $cmd2>"
            errors=$((errors + 1))
        else
            echo "‚úÖ OK (Valgrind): <$infile $badcmd | $cmd2>"
        fi
    else
        # üöÄ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º `\n`, —á—Ç–æ–±—ã `diff` —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        sed -i -e '$a\' expected_output.txt
        sed -i -e '$a\' "$outfile"

        if diff expected_output.txt "$outfile" >/dev/null 2>&1; then
            echo "‚úÖ OK (badcmd): matched shell behavior for <$infile $badcmd | $cmd2>"
        else
            echo "‚ùå FAIL (badcmd): differs from shell for <$infile $badcmd | $cmd2>"
            echo "--- Expected Output (hexdump) ---"
            hexdump -C expected_output.txt
            echo "--- Pipex Output (hexdump) ---"
            hexdump -C "$outfile"
            errors=$((errors + 1))
        fi
    fi
}

# All tests
echo "üöÄ [Phase 1] Testing two-command ..."
echo ""
echo -e "Hello\nWorld\nPipex\nTest\ntest1\ntest2" > infile1.txt
run_test "infile1.txt" "cat" "wc -l" "outfile1.txt"
run_test "infile1.txt" "cat" "wc -l" "outfile1.txt" "valgrind"
echo -e "apple\nbanana\napple\ncherry\norange" > infile2.txt
run_test "infile2.txt" "grep apple" "wc -w" "outfile2.txt"
run_test "infile2.txt" "grep apple" "wc -w" "outfile2.txt" "valgrind"
echo -e "some content for ls\n" > infile3.txt
run_test "infile3.txt" "ls" "grep pipex" "outfile3.txt"
run_test "infile3.txt" "ls" "grep pipex" "outfile3.txt" "valgrind"

echo ""
echo "üöÄ [Phase 2] Testing multiple-command..."
echo ""
run_multi_test "infile.txt" "cat" "grep test" "uniq" "wc -l" "multi_out.txt"
run_multi_test "infile.txt" "cat" "grep test" "uniq" "wc -l" "multi_out.txt" "valgrind"

echo ""
echo "üöÄ [Phase 3] Testing empty infile..."
echo ""
touch empty_infile.txt
run_test "empty_infile.txt" "cat" "wc -l" "empty_out.txt"
run_test "empty_infile.txt" "cat" "wc -l" "empty_out.txt" "valgrind"

echo ""
echo "üöÄ [Phase 4] Testing here_doc..."
echo ""
run_here_doc_test "END" "cat" "wc -l" "outfile_hd.txt"
run_here_doc_test "END" "cat" "wc -l" "outfile_hd.txt" "valgrind"

echo ""
echo "üöÄ [Phase 5] Testing nonexistent command..."
echo ""
run_badcmd_test "infile_bad.txt" "blahblah_123" "wc -l" "out_bad.txt"
run_badcmd_test "infile_bad.txt" "blahblah_123" "wc -l" "out_bad.txt" "valgrind"

echo ""
if [ "$errors" -gt 0 ]; then
    echo "‚ö†Ô∏è  Completed with $errors errors."
else
    echo "üéâ All tests passed successfully!"
fi

# Delete all temporary files
cd ..
rm -rf "$TEST_DIR"
