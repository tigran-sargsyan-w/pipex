#!/bin/bash

errors=0  # –°—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
PIPEX_BIN="$(pwd)/pipex"  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ pipex

# 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ pipex
if [ ! -f "$PIPEX_BIN" ]; then
    echo "‚ùå Error: pipex binary not found! Please compile your project first."
    exit 1
fi

# 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pipex –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
if [ ! -x "$PIPEX_BIN" ]; then
    chmod +x "$PIPEX_BIN"
fi

# –°–æ–∑–¥–∞–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEST_DIR="pipex_test_dir"
mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

echo "======================================"
echo "üöÄ PIPEX ADVANCED TESTER + BAD COMMAND"
echo "======================================"

########################
# –§–£–ù–ö–¶–ò–Ø: run_test (–¥–≤–µ –∫–æ–º–∞–Ω–¥—ã)
########################
# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç < infile cmd1 | cmd2 > expected.txt —Å —Ç–µ–º, —á—Ç–æ –¥–∞—ë—Ç ./pipex infile cmd1 cmd2 outfile
run_test() {
    local infile="$1"
    local cmd1="$2"
    local cmd2="$3"
    local outfile="$4"

    # –ï—Å–ª–∏ infile –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º
    if [ ! -f "$infile" ]; then
        echo "Creating default $infile..."
        echo -e "Hello\nWorld\nPipex\nTest" > "$infile"
    fi

    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    rm -f expected.txt
    < "$infile" $cmd1 | $cmd2 > expected.txt 2>/dev/null

    # –ó–∞–ø—É—Å–∫–∞–µ–º pipex
    rm -f "$outfile"
    "$PIPEX_BIN" "$infile" "$cmd1" "$cmd2" "$outfile" 2>/dev/null

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ outfile
    if [ ! -f "$outfile" ]; then
        echo "‚ùå FAIL: Pipex did not create $outfile for <$infile $cmd1 | $cmd2>"
        errors=$((errors + 1))
        return
    fi

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    if diff expected.txt "$outfile" >/dev/null 2>&1; then
        echo "‚úÖ OK: <$infile $cmd1 | $cmd2> -> $outfile"
    else
        echo "‚ùå FAIL: <$infile $cmd1 | $cmd2> -> $outfile"
        echo "--- Expected ---"
        cat expected.txt
        echo "--- Got ---"
        cat "$outfile"
        errors=$((errors + 1))
    fi
}

########################
# –§–£–ù–ö–¶–ò–Ø: run_here_doc_test
########################
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ here_doc (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é)
run_here_doc_test() {
    local limiter="$1"
    local cmd1="$2"
    local cmd2="$3"
    local outfile="$4"

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏–º–∏—Ç–∏—Ä—É–µ–º shell)
    cat <<EOF | $cmd1 | $cmd2 > expected_hd.txt
hello
aaa
bbb
EOF

    rm -f "$outfile"
    # –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ –≤ pipex
    printf "hello\naaa\nbbb\n%s\n" "$limiter" | "$PIPEX_BIN" here_doc "$limiter" "$cmd1" "$cmd2" "$outfile" 2>/dev/null

    if [ ! -f "$outfile" ]; then
        echo "‚ùå FAIL (here_doc): Did not create $outfile (limiter=\"$limiter\", cmds=\"$cmd1 $cmd2\")"
        errors=$((errors + 1))
        return
    fi

    if diff expected_hd.txt "$outfile" >/dev/null 2>&1; then
        echo "‚úÖ OK (here_doc): LIMITER=\"$limiter\""
    else
        echo "‚ùå FAIL (here_doc): LIMITER=\"$limiter\""
        errors=$((errors + 1))
    fi
}

########################
# –§–£–ù–ö–¶–ò–Ø: run_valgrind_test
########################
run_valgrind_test() {
    local args=("$@")
    local val_cmd="valgrind --leak-check=full --show-leak-kinds=all \
        --errors-for-leak-kinds=all --error-exitcode=42 $PIPEX_BIN ${args[*]}"

    local vg_out
    vg_out=$(eval "$val_cmd" 2>&1)
    local status=$?

    if [ "$status" -eq 42 ]; then
        echo "‚ùå FAIL (Valgrind): ${args[*]}"
        echo "$vg_out" | grep "ERROR SUMMARY:"
        errors=$((errors + 1))
    else
        echo "‚úÖ OK (Valgrind): ${args[*]}"
    fi
}

########################
# –§–£–ù–ö–¶–ò–Ø: run_badcmd_test (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞)
########################
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ outfile –≤—Å—ë-—Ç–∞–∫–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è, —Å–º–æ—Ç—Ä–∏–º diff. 
# –û–±—ã—á–Ω–æ shell –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É: "bash: blahblah: command not found". 
# Pipex —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É (Command not found).
run_badcmd_test() {
    local infile="$1"
    local badcmd="$2"
    local cmd2="$3"
    local outfile="$4"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º infile, –µ—Å–ª–∏ –Ω–µ—Ç
    if [ ! -f "$infile" ]; then
        echo -e "Some input data\n" > "$infile"
    fi

    # –û–∂–∏–¥–∞–µ–º—ã–π shell-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # shell way: < infile badcmd | cmd2
    # –ù–æ —Ç.–∫. badcmd –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, shell –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É, outfile –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º/–Ω–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º.
    # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å "expected", –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫:
    rm -f expected_bad.txt
    ( < "$infile" $badcmd | $cmd2 ) > expected_bad.txt 2> bad_error.txt

    rm -f "$outfile"
    "$PIPEX_BIN" "$infile" "$badcmd" "$cmd2" "$outfile" 2>/dev/null

    if [ ! -f "$outfile" ]; then
        echo "‚úÖ OK (badcmd): outfile not created for <$infile $badcmd | $cmd2>" 
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ pipex –Ω–µ —Å–æ–∑–¥–∞—ë—Ç outfile, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç—ã–º ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
        return
    fi

    # –ï—Å–ª–∏ outfile —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º—ã –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å diff (—á–∞—â–µ –≤—Å–µ–≥–æ –æ–Ω–æ –ø—É—Å—Ç–æ–µ).
    if diff expected_bad.txt "$outfile" >/dev/null 2>&1; then
        echo "‚úÖ OK (badcmd): matched shell's empty output for <$infile $badcmd | $cmd2>"
    else
        echo "‚ùå FAIL (badcmd): differ from shell for <$infile $badcmd | $cmd2>"
        errors=$((errors + 1))
    fi
}

########################
#  –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–´
########################

echo "1) Simple two-command tests..."
# –¢–µ—Å—Ç 1: cat | wc -l
echo -e "Hello\nWorld\nPipex\nTest" > infile1.txt
run_test "infile1.txt" "cat" "wc -l" "outfile1.txt"

# –¢–µ—Å—Ç 2: grep apple | wc -w
echo -e "apple\nbanana\napple\ncherry\norange" > infile2.txt
run_test "infile2.txt" "grep apple" "wc -w" "outfile2.txt"

# –¢–µ—Å—Ç 3: ls | grep pipex
echo -e "some content for ls\n" > infile3.txt
run_test "infile3.txt" "ls" "grep pipex" "outfile3.txt"

echo ""
echo "2) here_doc test..."
run_here_doc_test "END" "cat" "wc -l" "outfile_hd.txt"

echo ""
echo "3) Valgrind tests on these scenarios..."
run_valgrind_test "infile1.txt" "cat" "wc -l" "val_out1.txt"
run_valgrind_test "infile2.txt" "grep apple" "wc -w" "val_out2.txt"
# run_valgrind_test "here_doc" "END" "cat" "wc -l" "val_hd.txt"

echo ""
echo "4) Nonexistent command test..."
run_badcmd_test "infile_bad.txt" "blahblah_123" "wc -l" "out_bad.txt"

echo ""
echo "5) Valgrind test on bad command..."
run_valgrind_test "infile_bad.txt" "nonexistCMD999" "wc -l" "val_bad.txt"

echo ""
if [ "$errors" -gt 0 ]; then
    echo "‚ö†Ô∏è  Completed with $errors errors."
else
    echo "üéâ All tests passed successfully!"
fi

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -f expected.txt expected_hd.txt bad_error.txt expected_bad.txt 
rm -f infile1.txt infile2.txt infile3.txt infile_bad.txt 
rm -f outfile1.txt outfile2.txt outfile3.txt outfile_hd.txt
rm -f out_bad.txt val_out1.txt val_out2.txt val_hd.txt val_bad.txt
cd ..
rm -rf "$TEST_DIR"
